= A Reverse Proxy for Rack

This is a simple reverse proxy for Rack that pretty heavily rips off Rack Forwarder.  It is not meant for production systems (although it may work), as the webserver fronting your app is generally much better at this sort of thing.  However this is capable of doing other nice things such as changing content that is being proxies back, making this useful for resetting URLs in content to match your URL namespace and especially useful when deploying to PaaS like Heroku, AWS Elastic Beanstalk or Cloudbees where your ability to configure the web sever might be limited.

== Installation
The gem is available on gemcutter.  Assuming you have a recent version of Rubygems you should just be able to install it via:
  gem install rack-reverse-proxy

For your Gemfile use:
  gem "rack-reverse-proxy", :require => "rack/reverse_proxy"

== Usage
Matchers can be a regex or a string.  If a regex is used, you can use the subcaptures in your forwarding url by denoting them with a $.

Right now if more than one matcher matches any given route, it throws an exception for an ambiguous match.  This will probably change later.  If no match is found, the call is forwarded to your application.

=== Configuring for a Rack app
Below is an example for configuring the middleware:

  require 'rack/reverse_proxy'

  use Rack::ReverseProxy do 
    # Set :preserve_host to true globally (default is true already)
    reverse_proxy_options :preserve_host => true

    # Forward the path /test* to http://example.com/test*
    reverse_proxy '/test', 'http://example.com/'

    # Forward the path /foo/* to http://example.com/bar/*
    reverse_proxy /^\/foo(\/.*)$/, 'http://example.com/bar$1', :username => 'name', :password => 'basic_auth_secret'
  end

  app = proc do |env|
    [ 200, {'Content-Type' => 'text/plain'}, "b" ]
  end
  run app

=== Configuring for Rails 3
In your application.rb add the middleware configuration as below:

  module MyApp
    class Application < Rails::Application
      # Settings in config/environments/* take precedence over those specified here.
      # Application configuration should go into files in config/initializers
      # -- all .rb files in that directory are automatically loaded.
  
      # ...
  
      # add reverse-proxy middleware
      # reverse proxy middle ware
      require 'rack/reverse_proxy'
  
      config.middleware.use Rack::ReverseProxy do 
        # Set :preserve_host to true globally (default is true already)
        reverse_proxy_options :preserve_host => true

        # Forward the path /test* to http://example.com/test*
        reverse_proxy '/test', 'http://example.com/'
    
        # Forward the path /foo/* to http://example.com/bar/*
        reverse_proxy /^\/foo(\/.*)$/, 'http://example.com/bar$1', :username => 'name', :password => 'basic_auth_secret'
      end
  
    end
  end

=== Options
reverse_proxy_options sets global options for all reverse proxies. Available options are:
* :preserve_host Set to false to omit Host headers
* :username username for basic auth
* :password password for basic auth
* :matching is a global only option, if set to :first the first matched url will be requested (no ambigous error). Default: :all.
* :timeout seconds to timout the requests

=== Modifying content when relaying back
The gem allows you to update content as it flows back to browser.  This can be useful in certain cases.  For instance lets say you have an app plus a blog hosted on [Wordpress.com](http://Wordpress.com) or [tumblr](http://www.tumblr.com) that you want to serve in the URL namespace for your app.  But the pages coming from blog server will have URLs like xxx.wordpress.com/category/post which you rather be <your app URL>/blog/category/post.
You can do this by specifying a block to the reverse_proxy call.  The block gets passed in two parameters, body and headers.  You can use the header to determine if you want to modify content (for example if content-type is image you may want to skip it).  See example below

      # Forward the path /blogs* to http://redmica.wordpress.com/*
      reverse_proxy /^\/blogs(\/.*)$/, 'http://xxx.wordpress.com$1' do |body, headers|
        p "#{headers.inspect}"
        body.gsub "http://xxx.wordpress.com", "/blogs" unless headers["Content-Type"].downcase["text/"].nil?
      end

== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010 Jon Swope. See LICENSE for details.